####################################################################
# Exchange 2010 Architecture Report
#
# File : E2K10_Architecture_CMD.ps1
# Version : 2.0
# Author : Pascal Theil & Franck Nerot
# Author Mail : skall_21@hotmail.com & fnerot66@hotmail.com
# Creation date : 12/09/2011
# Modification date : 26/10/2011
#
# Exchange 2010
# 
####################################################################

########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
# Generated On: 14/10/2011 14:17
# Generated By: franckn
########################################################################

#----------------------------------------------
#region Application Functions
#----------------------------------------------

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add snapins and custom code to validate the application load
	
	#[System.Windows.Forms.Application]::DoEvents()
	return $true #return true for success or false for failure
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload snapins when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-E2K10_Architecture_V2_BETA_pff {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$Principal = New-Object System.Windows.Forms.Form
	$JOBCompleted = New-Object System.Windows.Forms.Label
	$labelJobsCompleted = New-Object System.Windows.Forms.Label
	$numericupdown1 = New-Object System.Windows.Forms.NumericUpDown
	$labelNumberOfJobs = New-Object System.Windows.Forms.Label
	$statusbar1 = New-Object System.Windows.Forms.StatusBar
	$labelElapsedTime = New-Object System.Windows.Forms.Label
	$label1 = New-Object System.Windows.Forms.Label
	$buttonCancel = New-Object System.Windows.Forms.Button
	$progressbar1 = New-Object System.Windows.Forms.ProgressBar
	$checkedlistbox1 = New-Object System.Windows.Forms.CheckedListBox
	$checkboxSelectALL = New-Object System.Windows.Forms.CheckBox
	$buttonExecute = New-Object System.Windows.Forms.Button
	$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$Principal_Load={
		#TODO: Initialize Form Controls here
		$statusbar1.Text = "Please select  jobs to execute"
		$Principal.Visible = $true
		$Snaps = Get-PSSnapin -Registered
	foreach ($Snap in $Snaps)
		{
			if ($Snap.Name -eq "Microsoft.Exchange.Management.PowerShell.E2010")
				{
					$OK = $True
				}
		}
	if ($OK -ne $True)
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Exchange 2010 Management Tools not installed on the Local Machine","Error")
			$Principal.Close()	
		}

			
	}
	
	
	$buttonExecute_Click={
		############################################
		# Disable GUI Buttons except Cancel Button #
		############################################
		$buttonExecute.Enabled = $false
		$checkboxSelectALL.Enabled = $false
		$checkedlistbox1.Enabled = $false
		$numericupdown1.Enabled = $false
		
		##########################
		# Initializing variables #
		##########################
		$Mess=""
		$JOBCompleted.Text =""
		$Cancelled = $null
		$script:CancelLoop = $false
		$progressbar1.Value = 0
		$labelElapsedTime = ""
		$Begin = $null
		$Stop = $null
		$Filename = $null
		$HTMLFile = $null
		$Final = $null
		[System.Windows.Forms.Application]::DoEvents()
		$Threads = $numericupdown1.Value
		$ALLTABLEJOBS = $null
		$ALLTABLEJOBS = @()
		$jobs = $null
		$job = $null
		
		###############	
		# MAIN REGION #
		###############
			
		$begin = Get-Date
		
		#Testing if Items have been selected or not
		if ($checkedlistbox1.CheckedItems -ne $null)
			{
				
			
				#Removing all current Jobs if needed
				$jobs = Get-Job
				if ($jobs -ne $null)
				{
				$statusbar1.Text = "Clearing old jobs"
				[System.Windows.Forms.Application]::DoEvents()
					foreach ($job in $jobs)
					{
						$CurrentTime = Get-Date
						$label1.Text = (($CurrentTime - $begin).tostring()).substring(0,8)
						[System.Windows.Forms.Application]::DoEvents()
						if ($job.state -eq "Running")
							{
								Stop-Job $job.id
								Remove-Job $job.id
							}
						else
							{
								Remove-Job $job.id
							}
					}
				}
			
				$statusbar1.Text =""
				[System.Windows.Forms.Application]::DoEvents()
				
				#Generating Report Filename
				$Filename = ".\ArchitectureReport_" + $Begin.Hour + $Begin.Minute + "_" + $Begin.Day + "-" + $Begin.Month + "-" + $Begin.Year + ".htm"
				$jobs = @() 
				$statusbar1.Text = "Creating new jobs"
				[System.Windows.Forms.Application]::DoEvents()
			
				#Generating HTML Header
				$statusbar1.Text = "Creating Header Job"
				[System.Windows.Forms.Application]::DoEvents()
				Start-Job -Name "Header" -FilePath ".\Scripts\Header.ps1"
				
				$statusbar1.Text = "Waiting for Header Job"
				[System.Windows.Forms.Application]::DoEvents()
				$jobs = Get-Job
				while (($jobs -ne $null) -and ($Cancelled -ne 5))
					{					
						if ($jobs.State -eq "Running")
							{
								$CurrentTime = Get-Date
								$label1.Text = (($CurrentTime - $begin).tostring()).substring(0,8)
								[System.Windows.Forms.Application]::DoEvents()
								Start-Sleep -Seconds 1
							}
						else
							{
								$HTMLFile = Receive-Job -Name "Header"
								Remove-Job -Name "Header"		
							}
						$jobs = Get-Job
					}			
			
				#Creating list of jobs that have been selected
				foreach ($item in $checkedlistbox1.CheckedItems)
					{
						$CurrentTime = Get-Date
						$label1.Text = (($CurrentTime - $begin).tostring()).substring(0,8)
						[System.Windows.Forms.Application]::DoEvents()
						if(($script:CancelLoop -eq $true) -or ($Cancelled -eq 5))
	        				{            			
								#Clear the progress bar
	            				$progressbar1.Value = 0
								$Stop = "Execution Cancelled while parsing jobs to create"
								#Exit the loop
	            				$Cancelled = 5						
								break;					
	        				}
						else
							{
								#Write-Host $item.ToString() " : " $checkedlistbox1.GetItemCheckState($checkedListBox1.Items.IndexOf($item))			
								if ($item.ToString() -eq "Active Directory")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Active Directory"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\ActiveDirectory.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}
								if ($item.ToString() -eq "Viewing SPN")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Viewing SPN"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\SetSPNView.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}
								if ($item.ToString() -eq "Duplicated SPN")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Duplicated SPN"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\SetSPNDupl.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}									
								if ($item.ToString() -eq "Hardware Information")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Hardware Information"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\HardwareInformation.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}
								if ($item.ToString() -eq "Disk Report Information")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Disk Report Information"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\DiskInformation.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}	
								if ($item.ToString() -eq "Exchange Servers Information")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Exchange Servers Information"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\ExchangeServersInformation.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}	
								if ($item.ToString() -eq "Exchange Services")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Exchange Services"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\ExchangeServices.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0	
										$ALLTABLEJOBS += $TABLE		
									}
								if ($item.ToString() -eq "Exchange Rollup (E2K7 Only)")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Exchange Rollup (E2K7 Only)"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\ExchangeRollupE2K7.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE		
									}									
								if ($item.ToString() -eq "Exchange Rollup (E2K10 Only)")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Exchange Rollup"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\ExchangeRollup.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE		
										
									}
								if ($item.ToString() -eq "Client Access Server Information")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "CAS Information"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\CASServerInformation.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE										
									}
								if ($item.ToString() -eq "Client Access Server - OWA Virtual Directory")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "CAS OWA"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\CASOWA.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE										
									}
								if ($item.ToString() -eq "Client Access Server - WebServices Virtual Directory")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "CAS WebServices"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\CASWebservices.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Client Access Server - Autodiscover Virtual Directory")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "CAS Autodiscover"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\CASAutodiscover.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE											
									}
								if ($item.ToString() -eq "Client Access Server - OAB Virtual Directory")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "CAS OAB"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\CASOAB.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE										
									}
								if ($item.ToString() -eq "Client Access Server - ECP Virtual Directory")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "CAS ECP"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\CASECP.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}	
								if ($item.ToString() -eq "Client Access Server - ActiveSync Virtual Directory")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "CAS ActiveSync"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\CASActiveSync.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}	
								if ($item.ToString() -eq "Client Access Server - Powershell Virtual Directory")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "PowershellVD"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\PowershellVD.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}									
								if ($item.ToString() -eq "Client Access Server - Exchange Certificates")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "CAS Certificates"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\CASCertificates.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "HUB Transport - Information")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "HUB Information"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\HUBInformation.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE										
									}
								if ($item.ToString() -eq "HUB Transport - Back Pressure (E2K10 Only)")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "HUB BackPressure"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\HUBBackPressure.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Database Availability Group - Information")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "DAG Information"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\DAGInformation.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Database Availability Group - Network")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "DAG Network"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\DAGNetwork.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Database Availability Group - Replication")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "DAG Replication"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\DAGReplication.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
										
									}
								if ($item.ToString() -eq "Database Availability Group - DatabaseCopy")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "DAG DBCopy"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\DAGDBCopy.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE
									}
								if ($item.ToString() -eq "Database Availability Group - Backup")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "DAG Backup"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\DAGBackup.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Database Availability Group - Database Size and Availability")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "DAG DBSize"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\DAGDBSize.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Database Availability Group - RPCClientAccessServer")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "DAG RPCClientAccessSRV"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\DAGRPCClientAccessServer.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Mailbox Server - Information (Out of DAG Servers)")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "MBX Information"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\MBXInformation.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE											
									}
								if ($item.ToString() -eq "Mailbox Server - Database Size and Availability (Out of DAG Servers)")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "MBX DBSize"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\MBXDBSIZE.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE											
									}
								if ($item.ToString() -eq "Mailbox Server - Backup (Out of DAG Servers)")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "MBX Backup"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\MBXBACKUP.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE											
									}	
								if ($item.ToString() -eq "Mailbox Server - RPCClientAccessServer (Out of DAG Servers)")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "MBX RPCClientAccessServer"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\MBXRPCClientAccessServer.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE											
									}										
								if ($item.ToString() -eq "Mailbox Server - Offline Address Book")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "MBX OAB"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\MBXOAB.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE											
									}
								if ($item.ToString() -eq "Mailbox Server - Calendar Repair Assistant")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "MBX Calendar RA"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\MBXCalRepairAssistant.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE											
									}											
								if ($item.ToString() -eq "Public Folder Databases")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "Public Folder Databases"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\PublicFolderDB.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE		
									}
								if ($item.ToString() -eq "RPCClientAccess Information")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "RPCClientAccess Information"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\RPCClientAccess.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE		
									}									
								if ($item.ToString() -eq "Test Mailflow")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestMailflow"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\TestMailflow.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE										
									}
								if ($item.ToString() -eq "Test OWA Connectivity")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestOWAConnectivity"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\TestOWAConnectivity.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Test Web Services Connectivity")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestWSConnectivity"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\WEBServicesConnectivity.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Test ActiveSync Connectivity")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestASConnectivity"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\TestASConnectivity.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Test ECP Connectivity")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestECPConnectivity"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\TestECPConnectivity.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Test MAPI Connectivity - Mailbox and Public Folder Databases")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestMAPIConnectivity"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\TestMAPIConnectivity.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Test OutlookConnectivity")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestOLConnectivity"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\TestOLConnectivity.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}
								if ($item.ToString() -eq "Test OutlookWebServices")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestOutlookWebServices"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\TestOutlookWebServices.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}	
								if ($item.ToString() -eq "Test PowershellConnectivity")
									{
										$Text = "Creating job for " + $item.ToString()
										$TABLE = New-Object system.Object
										$TABLE | add-member -membertype NoteProperty -name CheckName -value $item.ToString()
										$TABLE | add-member -membertype NoteProperty -name StatusBar -value $Text
										$TABLE | add-member -membertype NoteProperty -name JobName -value "TestPowershellConnectivity"								
										$TABLE | add-member -membertype NoteProperty -name Filepath -value ".\Scripts\TestPowershellConnectivity.ps1"
										$TABLE | add-member -membertype NoteProperty -name JOBLoaded -Value 0
										$ALLTABLEJOBS += $TABLE									
									}									
							}
					}
				
				#Variables initialization for next loop
				$i = 0
				$StillJobsToRun = (@($ALLTABLEJOBS | Where-Object {$_.JOBLoaded -eq 0})).count
				$JOBCompleted.Text = "0/" + $ALLTABLEJOBS.count
				[System.Windows.Forms.Application]::DoEvents()
				$CurrentThreads = 0
				$jobs = @()
			
				#Looping While Cancel button is not clicked and all jobs have not been created. At the same time we check for not going beyond the number of maximum defined threads
				while (($StillJobsToRun -gt 0) -and ($Cancelled -ne 5))
					{
						$CurrentTime = Get-Date
						$label1.Text = (($CurrentTime - $begin).tostring()).substring(0,8)
						[System.Windows.Forms.Application]::DoEvents()
						
						$Inc = $Threads - $CurrentThreads					
						if ($CurrentThreads -lt $Threads)
							{
								$Max = $i +$Inc
								for ($j = $i ; $j -lt $Max ; $j++)
									{									
										if ($StillJobsToRun -eq 0)
										{										
											break;
										}
										else
										{
											$i++
											$jobs += Start-Job -Name $ALLTABLEJOBS[$j].JobName -FilePath $ALLTABLEJOBS[$j].Filepath
											$ALLTABLEJOBS[$j].JOBLoaded = 1
											$statusbar1.Text = $ALLTABLEJOBS[$j].StatusBar
							                #Write-Host $ALLTABLEJOBS[$j].StatusBar
											$CurrentThreads = (@(Get-Job | Where-Object {$_.state -eq "Running"})).count
											$CompletedJobs = (@(Get-Job | Where-Object {$_.state -eq "Completed"})).count
											
											#Next "if" needed to complete the last job because $CompletedJobs is null for the last object
											if ($CompletedJobs -eq $null)
												{
													$CompletedJobs =0
												}
											$Mess = $CompletedJobs.ToString() + " / " + ($ALLTABLEJOBS.count).ToString()
											$JOBCompleted.Text = $Mess			
											$progressbar1.Value = ($CompletedJobs/$ALLTABLEJOBS.count*100)
											[System.Windows.Forms.Application]::DoEvents()
											$StillJobsToRun = (@($ALLTABLEJOBS | Where-Object {$_.JOBLoaded -eq 0})).count
										}
									
									}
							}
						$CurrentThreads = (Get-Job | Where-Object {$_.state -eq "Running"}).count
						$CompletedJobs = (Get-Job | Where-Object {$_.state -eq "Completed"}).count
						$progressbar1.Value = ($CompletedJobs/$ALLTABLEJOBS.count*100)
						if ($CurrentThreads -eq $Threads)
							{
								#Maximum defined simultaneous jobs is reached
								$statusbar1.Text = "When current jobs will be finished, new jobs will be created (Max job = " + $Threads + ")"
							}
						[System.Windows.Forms.Application]::DoEvents()
						Start-Sleep -Seconds 1
					} 
			
			#Waiting for last jobs to finish
			if ($Cancelled -ne 5)
			{
				$jobs = Get-Job| Where-Object{$_.state -eq "Running"}
				while ($jobs -ne $null)
					{
						$CurrentTime = Get-Date
						$label1.Text = (($CurrentTime - $begin).tostring()).substring(0,8)				
						$jobs = Get-Job| Where-Object{$_.state -eq "Running"}
						$statusbar1.Text = "Waiting for last jobs to finish"
						$CompletedJobs = (@(Get-Job | Where-Object {$_.state -eq "Completed"})).count
						$Mess = $CompletedJobs.ToString() + " / " + ($ALLTABLEJOBS.count).ToString()
						$JOBCompleted.Text = $Mess
						$progressbar1.Value = ($CompletedJobs/$ALLTABLEJOBS.count*100)				
						[System.Windows.Forms.Application]::DoEvents()
						Start-Sleep 1
					}
				$CompletedJobs = (@(Get-Job | Where-Object {$_.state -eq "Completed"})).count
				$Mess = $CompletedJobs.ToString() + " / " + ($ALLTABLEJOBS.count).ToString()
				$JOBCompleted.Text = $Mess
				$progressbar1.Value = ($CompletedJobs/$ALLTABLEJOBS.count*100)	
				[System.Windows.Forms.Application]::DoEvents()
				
				#Retrieving finished jobs
				$jobs = Get-Job | sort ID
				foreach ($job in $jobs)
					{	
						$CurrentTime = Get-Date
						$label1.Text = (($CurrentTime - $begin).tostring()).substring(0,8)
						[System.Windows.Forms.Application]::DoEvents()
					
						if(($script:CancelLoop -eq $true) -or ($Cancelled -eq 5))
							{
								break;
							}
						else
							{
								$statusbar1.Text = "Merging Results"
								[System.Windows.Forms.Application]::DoEvents()
								$Final = receive-job $job.ID
								$HTMLFile += $Final
								Remove-Job $job.ID
							}
					}				
				#Compiling data returned by jobs
				$HTMLFile += Get-Content ".\scripts\footer.txt"
				$HTMLFile | out-file -encoding ASCII -filepath $Filename
				$statusbar1.Text = "Execution complete"
				[System.Windows.Forms.Application]::DoEvents()		
			}
			else
				{
					$statusbar1.Text = "Execution cancelled"
					[System.Windows.Forms.Application]::DoEvents()
				}
		}
		else
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Please select at least one job","Error")	
				$buttonExecute.Enabled = $true
				$checkboxSelectALL.Enabled = $true
				$checkedlistbox1.Enabled = $true
				$numericupdown1.Enabled = $true
				[System.Windows.Forms.Application]::DoEvents()
			}
		$buttonExecute.Enabled = $true
		$checkboxSelectALL.Enabled = $true
		$checkedlistbox1.Enabled = $true
		$numericupdown1.Enabled = $true
		$CurrentTime = Get-Date
		$label1.Text = (($CurrentTime - $begin).tostring()).substring(0,8)
		[System.Windows.Forms.Application]::DoEvents()
		
		if(($script:CancelLoop -eq $true) -or ($Cancelled -eq 5))
			{
				$Stop = "Execution cancelled"
				$statusbar1.Text = $Stop
				$progressbar1.Value = 0
				[System.Windows.Forms.Application]::DoEvents()
			}
	}
	
	
	
	$checkboxSelectALL_CheckedChanged={
		#TODO: Place custom script here
		
		if ($checkboxSelectALL.CheckState -eq "Checked")
		{
		for ($a=0;$a -lt $checkedlistbox1.Items.Count;$a++)
			{
				$checkedlistbox1.SetItemCheckstate($a,"Checked")
			}
		}
		if ($checkboxSelectALL.CheckState -eq "Unchecked")
		{
		for ($a=0;$a -lt $checkedlistbox1.Items.Count;$a++)
			{
				$checkedlistbox1.SetItemCheckstate($a,"Unchecked")			
			}
		}		
	}
	
	
	
	$checkedlistbox1_SelectedIndexChanged={
		#TODO: Place custom script here
		
		if ($checkedlistbox1.GetItemCheckState($checkedlistbox1.SelectedIndex) -eq "Unchecked")
		{
		$checkedlistbox1.SetItemCheckstate($checkedlistbox1.SelectedIndex,"Checked")
		}
		elseif ($checkedlistbox1.GetItemCheckState($checkedlistbox1.SelectedIndex) -eq "Checked")
		{
			$checkedlistbox1.SetItemCheckState($checkedlistbox1.SelectedIndex,"Unchecked")
		}	
	}
	#region Control Helper Functions
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$listBox,
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [Array])
		{
			$listBox.Items.AddRange($Items)
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember	
	}#endregion
	
	$buttonCancel_Click={
		#TODO: Place custom script here
		$Cancelled = 5
		$script:CancelLoop = $true
	}
	
	
	
	
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$Principal.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonCancel.remove_Click($buttonCancel_Click)
			$checkedlistbox1.remove_SelectedIndexChanged($checkedlistbox1_SelectedIndexChanged)
			$checkboxSelectALL.remove_CheckedChanged($checkboxSelectALL_CheckedChanged)
			$buttonExecute.remove_Click($buttonExecute_Click)
			$Principal.remove_Load($Principal_Load)
			$Principal.remove_Load($Form_StateCorrection_Load)
			$Principal.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# Principal
	#
	$Principal.Controls.Add($JOBCompleted)
	$Principal.Controls.Add($labelJobsCompleted)
	$Principal.Controls.Add($numericupdown1)
	$Principal.Controls.Add($labelNumberOfJobs)
	$Principal.Controls.Add($statusbar1)
	$Principal.Controls.Add($labelElapsedTime)
	$Principal.Controls.Add($label1)
	$Principal.Controls.Add($buttonCancel)
	$Principal.Controls.Add($progressbar1)
	$Principal.Controls.Add($checkedlistbox1)
	$Principal.Controls.Add($checkboxSelectALL)
	$Principal.Controls.Add($buttonExecute)
	$Principal.AutoScaleMode = 'None'
	$Principal.ClientSize = '550, 566'
	$Principal.Name = "Principal"
	$Principal.StartPosition = 'CenterScreen'
	$Principal.Text = "Exchange 2010 Architecture Report"
	$Principal.add_Load($Principal_Load)
	$Principal.MaximizeBox = $False
	$Principal.MaximumSize =  '550, 600'
	$Principal.MinimumSize =  '550, 600'
	#
	# JOBCompleted
	#
	$JOBCompleted.Location = '200, 511'
	$JOBCompleted.Name = "JOBCompleted"
	$JOBCompleted.Size = '100, 23'
	$JOBCompleted.TabIndex = 14
	#
	# labelJobsCompleted
	#
	$labelJobsCompleted.Location = '93, 511'
	$labelJobsCompleted.Name = "labelJobsCompleted"
	$labelJobsCompleted.Size = '100, 23'
	$labelJobsCompleted.TabIndex = 13
	$labelJobsCompleted.Text = "Jobs Completed"
	#
	# numericupdown1
	#
	$numericupdown1.Location = '443, 10'
	$numericupdown1.Maximum = 15
	$numericupdown1.Minimum = 2
	$numericupdown1.Name = "numericupdown1"
	$numericupdown1.Size = '37, 20'
	$numericupdown1.TabIndex = 11
	$numericupdown1.Value = 6
	#
	# labelNumberOfJobs
	#
	$labelNumberOfJobs.Location = '348, 12'
	$labelNumberOfJobs.Name = "labelNumberOfJobs"
	$labelNumberOfJobs.Size = '127, 23'
	$labelNumberOfJobs.TabIndex = 12
	$labelNumberOfJobs.Text = "Number of jobs :"
	#
	# statusbar1
	#
	$statusbar1.Cursor = "Default"
	$statusbar1.Location = '0, 544'
	$statusbar1.Name = "statusbar1"
	$statusbar1.Size = '550, 22'
	$statusbar1.TabIndex = 10
	$statusbar1.Text = "statusbar1"
	#
	# labelElapsedTime
	#
	$labelElapsedTime.Location = '93, 484'
	$labelElapsedTime.Name = "labelElapsedTime"
	$labelElapsedTime.Size = '100, 23'
	$labelElapsedTime.TabIndex = 9
	$labelElapsedTime.Text = "Elapsed Time"
	#
	# label1
	#
	$label1.Location = '199, 484'
	$label1.Name = "label1"
	$label1.Size = '122, 23'
	$label1.TabIndex = 8
	#
	# buttonCancel
	#
	$buttonCancel.AutoSizeMode = 'GrowAndShrink'
	$buttonCancel.Location = '362, 506'
	$buttonCancel.Name = "buttonCancel"
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 7
	$buttonCancel.Text = "Cancel"
	$buttonCancel.UseVisualStyleBackColor = $True
	$buttonCancel.add_Click($buttonCancel_Click)
	#
	# progressbar1
	#
	$progressbar1.Location = '21, 458'
	$progressbar1.Name = "progressbar1"
	$progressbar1.Size = '497, 23'
	$progressbar1.TabIndex = 6
	#
	# checkedlistbox1
	#
	$checkedlistbox1.BackColor = 'Window'
	$checkedlistbox1.FormattingEnabled = $True
	[void]$checkedlistbox1.Items.Add("Active Directory")
	[void]$checkedlistbox1.Items.Add("Viewing SPN")
	[void]$checkedlistbox1.Items.Add("Duplicated SPN")
	[void]$checkedlistbox1.Items.Add("Hardware information")
	[void]$checkedlistbox1.Items.Add("Disk Report Information")
	[void]$checkedlistbox1.Items.Add("Exchange Servers Information")
	[void]$checkedlistbox1.Items.Add("Exchange Services")
	[void]$checkedlistbox1.Items.Add("Exchange Rollup (E2K7 Only)")	
	[void]$checkedlistbox1.Items.Add("Exchange Rollup (E2K10 Only)")
	[void]$checkedlistbox1.Items.Add("Client Access Server Information")
	[void]$checkedlistbox1.Items.Add("Client Access Server - OWA Virtual Directory")	
	[void]$checkedlistbox1.Items.Add("Client Access Server - WebServices Virtual Directory")
	[void]$checkedlistbox1.Items.Add("Client Access Server - Autodiscover Virtual Directory")
	[void]$checkedlistbox1.Items.Add("Client Access Server - OAB Virtual Directory")
	[void]$checkedlistbox1.Items.Add("Client Access Server - ECP Virtual Directory")
	[void]$checkedlistbox1.Items.Add("Client Access Server - ActiveSync Virtual Directory")
	[void]$checkedlistbox1.Items.Add("Client Access Server - Powershell Virtual Directory")
	[void]$checkedlistbox1.Items.Add("Client Access Server - Exchange Certificates")
	[void]$checkedlistbox1.Items.Add("HUB Transport - Information")
	[void]$checkedlistbox1.Items.Add("HUB Transport - Back Pressure (E2K10 Only)")
	[void]$checkedlistbox1.Items.Add("Database Availability Group - Information")
	[void]$checkedlistbox1.Items.Add("Database Availability Group - Network")
	[void]$checkedlistbox1.Items.Add("Database Availability Group - Replication")
	[void]$checkedlistbox1.Items.Add("Database Availability Group - DatabaseCopy")
	[void]$checkedlistbox1.Items.Add("Database Availability Group - Backup")
	[void]$checkedlistbox1.Items.Add("Database Availability Group - Database Size and Availability")
	[void]$checkedlistbox1.Items.Add("Database Availability Group - RPCClientAccessServer")
	[void]$checkedlistbox1.Items.Add("Mailbox Server - Information (Out of DAG Servers)")	
	[void]$checkedlistbox1.Items.Add("Mailbox Server - Database Size and Availability (Out of DAG Servers)")	
	[void]$checkedlistbox1.Items.Add("Mailbox Server - Backup (Out of DAG Servers)")	
	[void]$checkedlistbox1.Items.Add("Mailbox Server - RPCClientAccessServer (Out of DAG Servers)")	
	[void]$checkedlistbox1.Items.Add("Mailbox Server - Offline Address Book")	
	[void]$checkedlistbox1.Items.Add("Mailbox Server - Calendar Repair Assistant")	
	[void]$checkedlistbox1.Items.Add("Public Folder Databases")
	[void]$checkedlistbox1.Items.Add("RPCClientAccess Information")		
	[void]$checkedlistbox1.Items.Add("Test Mailflow")
	[void]$checkedlistbox1.Items.Add("Test OWA Connectivity")
	[void]$checkedlistbox1.Items.Add("Test Web Services Connectivity")
	[void]$checkedlistbox1.Items.Add("Test ActiveSync Connectivity")
	[void]$checkedlistbox1.Items.Add("Test ECP Connectivity")
	[void]$checkedlistbox1.Items.Add("Test MAPI Connectivity - Mailbox and Public Folder Databases")
	[void]$checkedlistbox1.Items.Add("Test OutlookConnectivity")
	[void]$checkedlistbox1.Items.Add("Test OutlookWebServices")	
	[void]$checkedlistbox1.Items.Add("Test PowershellConnectivity")	
	$checkedlistbox1.Location = '21, 43'
	$checkedlistbox1.Name = "checkedlistbox1"
	$checkedlistbox1.Size = '497, 394'
	$checkedlistbox1.TabIndex = 5
	$checkedlistbox1.add_SelectedIndexChanged($checkedlistbox1_SelectedIndexChanged)
	#
	# checkboxSelectALL
	#
	$checkboxSelectALL.Location = '21, 12'
	$checkboxSelectALL.Name = "checkboxSelectALL"
	$checkboxSelectALL.Size = '104, 24'
	$checkboxSelectALL.TabIndex = 3
	$checkboxSelectALL.Text = "Select ALL"
	$checkboxSelectALL.UseVisualStyleBackColor = $True
	$checkboxSelectALL.add_CheckedChanged($checkboxSelectALL_CheckedChanged)
	#
	# buttonExecute
	#
	$buttonExecute.AutoSizeMode = 'GrowAndShrink'
	$buttonExecute.Location = '443, 506'
	$buttonExecute.Name = "buttonExecute"
	$buttonExecute.Size = '75, 23'
	$buttonExecute.TabIndex = 1
	$buttonExecute.Text = "Execute"
	$buttonExecute.UseVisualStyleBackColor = $True
	$buttonExecute.add_Click($buttonExecute_Click)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $Principal.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$Principal.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$Principal.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $Principal.ShowDialog()

} #End Function

#Call OnApplicationLoad to initialize
if((OnApplicationLoad) -eq $true)
{
	#Call the form
	Call-E2K10_Architecture_V2_BETA_pff | Out-Null
	#Perform cleanup
	OnApplicationExit
}
